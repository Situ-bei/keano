import{_ as e,c as i,a as l,o as s}from"./app-CNWKg6A-.js";const a={};function t(n,o){return s(),i("div",null,o[0]||(o[0]=[l('<h3 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie"><span>1. Cookie</span></a></h3><ul><li><p><strong>特点</strong></p><ul><li>存储容量：每个域名下最多存储4KB的数据。</li><li>生命周期：可以通过设置 Expires 或 Max-Age 属性来控制Cookie的过期时间。如果不设置，Cookie会在浏览器关闭时失效。</li><li>安全性：可以通过设置 HttpOnly 属性来防止JavaScript访问，增加安全性。</li><li>传输：每次HTTP请求都会携带Cookie，因此会影响性能。</li><li>作用域：可以设置路径（Path）和域名（Domain）来限制Cookie的作用范围。</li></ul></li><li><p><strong>使用场景</strong></p><ul><li>会话管理：存储用户的会话信息，如登录状态 <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</li><li>个性化设置：存储用户的偏好设置。<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></li><li>跟踪用户行为：用于统计分析和广告投放。</li></ul></li></ul><h3 id="_2-localstorage" tabindex="-1"><a class="header-anchor" href="#_2-localstorage"><span>2. LocalStorage</span></a></h3><ul><li><strong>特点</strong><ul><li>存储容量：每个域名下大约可以存储5MB的数据。</li><li>生命周期：永久存储，除非手动清除或用户删除。</li><li>安全性：JavaScript可以直接访问，但不随HTTP请求发送。</li><li>作用域：存储在当前域名下，不同域名之间无法共享。</li></ul></li><li><strong>使用场景</strong><ul><li>持久化数据：存储用户设置、应用状态等需要长期保存的数据。</li><li>离线存储：存储应用在离线模式下需要的数据。</li></ul></li></ul><h3 id="_3-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_3-sessionstorage"><span>3. SessionStorage</span></a></h3><ul><li><strong>特点</strong><ul><li>存储容量：每个域名下大约可以存储5MB的数据。</li><li>生命周期：仅在当前会话中有效，关闭浏览器标签页或窗口后数据会被清除。</li><li>安全性：JavaScript可以直接访问，但不随HTTP请求发送。</li><li>作用域：存储在当前域名下，不同域名之间无法共享。</li></ul></li><li>使用场景 <ul><li>临时数据：存储临时性的数据，如购物车内容。</li><li>单次会话：存储仅在当前会话中需要的数据。</li></ul></li></ul><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span><strong>区别：</strong></span></a></h2><ul><li>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器 和服务器间来回传递。</li><li>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅 在本地保存</li><li>cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下,</li></ul><h3 id="存储大小限制也不同" tabindex="-1"><a class="header-anchor" href="#存储大小限制也不同"><span>存储大小限制也不同</span></a></h3><ul><li>cookie 数据不能超过 4K，同时因为每次 http 请求都会携带 cookie， 所以 cookie 只适合保存很小的数据，如回话标识。</li><li>webStorage 虽然也有存储大小的限制，但是比 cookie 大得多，可以达到 5M 或更大 数据</li></ul><h3 id="有效期不同" tabindex="-1"><a class="header-anchor" href="#有效期不同"><span>有效期不同</span></a></h3><ul><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，</li><li>localStorage： 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li><li>cookie：只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。 -（key：本身就是一个回话过程，关 闭浏览器后消失，session 为一个回话，当页面不同即使是同一页面打开两次，也被视为 同一次回话）</li></ul><h3 id="作用域不同" tabindex="-1"><a class="header-anchor" href="#作用域不同"><span>作用域不同</span></a></h3><ul><li>sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；</li><li>localStorage：在所有同源窗口都是共享的；</li><li>cookie：也是在所有同源窗口中共享的</li></ul><h3 id="cookie-session区别" tabindex="-1"><a class="header-anchor" href="#cookie-session区别"><span>cookie session区别</span></a></h3><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗 考虑到安全应当使用 session。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用 COOKIE。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><strong>保存用户登录状态</strong>。例如将用户 id 存储于一个 cookie 内，这样当用户下次访问该页面 时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie 还可以设置 过期时间，当超过时间期限后，cookie 就会自动消失。因此，系统往往可以提示用户保 持登录状态的时间：常见选项有一个月、三个 月、一年等。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><strong>跟踪用户行为</strong>。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。 如果每次都需要选择所在地是烦琐的，当利用了 cookie 后就会显得很人性化了，系统能 够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区 的天气情况。因为一切都是在后台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便定制页面。如果网站提供了换肤或更换布局的功能，那么可以使 用 cookie 来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以 保存上一次访问的界面风格。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',18)]))}const c=e(a,[["render",t],["__file","Cookie、LocalStorage 和 SessionStorage 的区别.html.vue"]]),h=JSON.parse('{"path":"/study/coding/interview/Cookie%E3%80%81LocalStorage%20%E5%92%8C%20SessionStorage%20%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"《Cookie、LocalStorage 和 SessionStorage 的区别》","lang":"zh-CN","frontmatter":{"date":"2024-10-20T00:00:00.000Z","title":"《Cookie、LocalStorage 和 SessionStorage 的区别》","category":["前端","游览器缓存"],"tag":["cookie","localStorage","sessionStorage","面试"],"feed":false,"seo":false,"head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://situ-bei.github.io/keano/en/study/coding/interview/Cookie%E3%80%81LocalStorage%20%E5%92%8C%20SessionStorage%20%E7%9A%84%E5%8C%BA%E5%88%AB.html"}]]},"headers":[{"level":3,"title":"1. Cookie","slug":"_1-cookie","link":"#_1-cookie","children":[]},{"level":3,"title":"2. LocalStorage","slug":"_2-localstorage","link":"#_2-localstorage","children":[]},{"level":3,"title":"3. SessionStorage","slug":"_3-sessionstorage","link":"#_3-sessionstorage","children":[]},{"level":2,"title":"区别：","slug":"区别","link":"#区别","children":[{"level":3,"title":"存储大小限制也不同","slug":"存储大小限制也不同","link":"#存储大小限制也不同","children":[]},{"level":3,"title":"有效期不同","slug":"有效期不同","link":"#有效期不同","children":[]},{"level":3,"title":"作用域不同","slug":"作用域不同","link":"#作用域不同","children":[]},{"level":3,"title":"cookie session区别","slug":"cookie-session区别","link":"#cookie-session区别","children":[]}]}],"git":{"createdTime":1729471464000,"updatedTime":1729572674000,"contributors":[{"name":"situ-bei","email":"2606405907@qq.com","commits":3}]},"readingTime":{"minutes":4.34,"words":1301},"filePathRelative":"study/coding/interview/Cookie、LocalStorage 和 SessionStorage 的区别.md","localizedDate":"2024年10月20日"}');export{c as comp,h as data};
