import{_ as i,c as s,b as a,g as l,a as e,o as t}from"./app-B4WJW4Mi.js";const n=i({},[["render",function(i,n){return t(),s("div",null,[n[0]||(n[0]=a("p",null,"Git 是一个分布式版本控制系统，用于跟踪计算机文件的变更，并协调多个用户之间的工作。它由 Linus Torvalds 于 2005 年创建，最初是为了更好地管理 Linux 内核的开发。Git 已经成为当今最流行的版本控制系统之一，广泛应用于软件开发和个人项目中。",-1
/* HOISTED */)),l(" more "),n[1]||(n[1]=e('<h1 id="_1-常见的版本控制工具" tabindex="-1"><a class="header-anchor" href="#_1-常见的版本控制工具"><span>1 常见的版本控制工具</span></a></h1><ul><li><p>主流的版本控制器有如下这些：</p><ul><li>Git</li><li>SVN（Subversion）</li><li>CVS（Concurrent Versions System）</li><li>VSS（Micorosoft Visual SourceSafe）</li><li>TFS（Team Foundation Server）</li><li>Visual Studio Online</li></ul></li><li><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN。</p></li></ul><h1 id="_2-启动git" tabindex="-1"><a class="header-anchor" href="#_2-启动git"><span>2 启动Git</span></a></h1><ul><li>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</li></ul><blockquote><ul><li><p><code>Git Bash</code>：Unix与Linux风格的命令行，使用最多，推荐最多</p></li><li><p><code>Git CMD</code>：Windows风格的命令行</p></li><li><p><code>Git GUI</code>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p></li></ul></blockquote><h1 id="_3-git配置" tabindex="-1"><a class="header-anchor" href="#_3-git配置"><span>3 Git配置</span></a></h1><ul><li><p>所有的配置文件，其实都保存在本地！</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看不同级别的配置文件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --list　</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#查看系统config   \t\t\t\t</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --list</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #查看当前用户（global）配置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-1-设置用户名与邮箱-用户标识-必要" tabindex="-1"><a class="header-anchor" href="#_3-1-设置用户名与邮箱-用户标识-必要"><span>3.1 设置用户名与邮箱（用户标识，必要）</span></a></h2><ul><li><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;****&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #名称</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ******</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">@qq.com</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   #邮箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>只需要做一次这个设置，如果你传递了<code>–global</code> 选项，因为<code>Git</code>将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或<code>e-mail</code>地址，你可以在该项目中运行该命令而不要<code>–global</code>选项。总之<code>–global</code>为全局配置，不加为某个项目的特定配置。</p></li></ul><h1 id="_4-git基本理论-重要" tabindex="-1"><a class="header-anchor" href="#_4-git基本理论-重要"><span>4 Git基本理论（重要）</span></a></h1><ul><li>Git本地有三个工作区域：工作目录（<code>Working Directory</code>）、暂存区(<code>Stage/Index</code>)、资源库(<code>Repository</code>或<code>Git Directory</code>)。如果在加上远程的git仓库(<code>Remote Directory</code>)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/fcd1e563d98d47cc5fa2ce5b4e321172.png" alt="图片|325" tabindex="0" loading="lazy"><figcaption>图片|325</figcaption></figure><blockquote><p><code>Workspace</code>：工作区，就是你平时存放项目代码的地方 <code>Index</code> / <code>Stage</code>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息 <code>Repository</code>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本 <code>Remote</code>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换 <code>Directory</code>：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。 <code>WorkSpace</code>：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。 <code>.git</code>（隐藏文件夹）：存放Git管理信息的目录，初始化仓库的时候自动创建。 <code>Index</code>/<code>Stage</code>：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。 <code>Local Repo</code>：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。 <code>Stash</code>：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</p></blockquote><h2 id="_4-1-工作流程" tabindex="-1"><a class="header-anchor" href="#_4-1-工作流程"><span>4.1 工作流程</span></a></h2><ul><li><p>git的工作流程一般是这样的：</p><ol><li><p>在工作目录中添加、修改文件；</p></li><li><p>将需要进行版本管理的文件放入暂存区域；</p></li><li><p>将暂存区域的文件提交到git仓库。</p></li></ol></li><li><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed) <img src="https://img-blog.csdnimg.cn/img_convert/145c6f2440d7c423067d433ba6d91493.png" alt="图片|450" loading="lazy"></p></li></ul><h1 id="_5-git项目搭建" tabindex="-1"><a class="header-anchor" href="#_5-git项目搭建"><span>5 Git项目搭建</span></a></h1><h2 id="_5-1-11-1、创建工作目录与常用指令" tabindex="-1"><a class="header-anchor" href="#_5-1-11-1、创建工作目录与常用指令"><span>5.1 11.1、创建工作目录与常用指令</span></a></h2><ul><li><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p></li><li><p>日常使用只要记住下图6个命令： <img src="https://img-blog.csdnimg.cn/img_convert/730763e8041ce0b4f94bcb9669d4266a.png" alt="图片|550" loading="lazy"></p></li></ul><h3 id="_5-1-1-本地仓库搭建" tabindex="-1"><a class="header-anchor" href="#_5-1-1-本地仓库搭建"><span>5.1.1 本地仓库搭建</span></a></h3><ul><li>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</li></ul><ol><li><p>创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。 <img src="https://img-blog.csdnimg.cn/img_convert/fa6129109903046f3a4caef5570b566d.png" alt="image-20230905105918052|550" loading="lazy"></p></li></ol><h3 id="_5-1-2-克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#_5-1-2-克隆远程仓库"><span>5.1.2 克隆远程仓库</span></a></h3><ol><li><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [url] $ git clone https://gitee.com/kuangstudy/kuang_livenote.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>去 gitee 或者 github 上克隆一个测试！ <img src="https://img-blog.csdnimg.cn/img_convert/81bbd1ebc91b01ff9b6b2c7b96722e3b.png" alt="image-20230905110137262|375" loading="lazy"><img src="https://img-blog.csdnimg.cn/img_convert/ab1c4abcd18cd9786e4c134bc1d175b2.png" alt="image-20230905110349695|400" loading="lazy"></p></li></ol><h1 id="_6-git文件操作" tabindex="-1"><a class="header-anchor" href="#_6-git文件操作"><span>6 Git文件操作</span></a></h1><h2 id="_6-1-文件的四种状态" tabindex="-1"><a class="header-anchor" href="#_6-1-文件的四种状态"><span>6.1 文件的四种状态</span></a></h2><ul><li>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</li></ul><blockquote><p><code>Untracked</code>: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code>状态变为<code>Staged</code>. <code>Unmodify</code>: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为<code>Modified.</code> 如果使用git <code>rm</code>移出版本库, 则成为<code>Untracked</code>文件 <code>Modified</code>: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存<code>staged</code>状态, 使用<code>git checkout</code> 则丢弃修改过, 返回到<code>unmodify</code>状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改 ! <code>Staged</code>: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>Unmodify</code>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<code>Modified</code></p></blockquote><h2 id="_6-2-查看文件状态" tabindex="-1"><a class="header-anchor" href="#_6-2-查看文件状态"><span>6.2 查看文件状态</span></a></h2><ul><li>上面说文件有4种状态，通过如下命令可以查看到文件的状态：<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查看指定文件状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [filename]</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查看所有文件状态</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#添加所有文件到暂存区</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#提交暂存区中的内容到本地仓库 -m 提交信息         </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;消息内容&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="_7-使用码云-gitee" tabindex="-1"><a class="header-anchor" href="#_7-使用码云-gitee"><span>7 使用码云(Gitee)</span></a></h1><ol><li><p>注册登录码云，完善个人信息（基本信息、个人空间地址…）</p></li><li><p>设置本机绑定<code>SSH</code>公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入 C:\\Users\\Administrator\\.ssh 目录</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成公钥</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh-keygen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rsa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="https://img-blog.csdnimg.cn/img_convert/8f9c4815e42d3f4148fc2ce790f2949e.png" alt="image-20230905144928776|500" tabindex="0" loading="lazy"><figcaption>image-20230905144928776|500</figcaption></figure><ol><li>将公钥信息public key （文件id_rsa.pub）添加到码云账户中即可！ <img src="https://img-blog.csdnimg.cn/img_convert/cb90e5b44631c9027f66ab4766b7aab2.png" alt="image-20230905145220794|525" loading="lazy"></li></ol><h1 id="_8-git分支" tabindex="-1"><a class="header-anchor" href="#_8-git分支"><span>8 GIT分支</span></a></h1><ul><li>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 列出所有本地分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 列出所有远程分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch-name]   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新建一个分支，但依然停留在当前分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch]   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新建一个分支，并切换到该分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> switch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">name]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> merge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch]   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 合并指定分支到当前分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch-name]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除分支</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除远程分支</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [branch-name]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -dr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [remote/branch]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_9-变基-rebase" tabindex="-1"><a class="header-anchor" href="#_9-变基-rebase"><span>9 变基（rebase）</span></a></h1><ul><li><p>在开发中除了通过 merge 来合并分支外，还可以通过变基来完成分支的合并。</p></li><li><p>我们通过 merge 合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。</p></li><li><p>原理（变基时发生了什么）：</p><ol><li>当我们发起变基时，git 会首先找到两条分支的最近的共同祖先</li><li>对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中</li><li>将当前部分指向目标的基底</li><li>以当前基底开始，重新执行历史操作</li></ol></li><li><p>变基和 <code>merge</code> 对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。</p></li></ul><h1 id="_10-远程仓库-remote" tabindex="-1"><a class="header-anchor" href="#_10-远程仓库-remote"><span>10 远程仓库（remote）</span></a></h1><ul><li>目前我对于 <code>git</code> 所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的 <code>git</code> 仓库。远程的 <code>git</code> 仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，<code>git</code> 的服务器通常由公司搭建内部使用或是购买一些公共的私有 <code>git</code> 服务器。我们学习阶段，直接使用一些开放的公共 git 仓库。目前我们常用的库有两个：<code>GitHub</code> 和 <code>Gitee</code>（码云）</li></ul><ol><li><p>将本地库上传 <code>git</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/lilichao/git-demo.git</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># git remote add &lt;remote name&gt; &lt;url&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -M</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改分支的名字的为main</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># git push 将代码上传服务器上</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将本地库上传 <code>gitee</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://gitee.com/ymhold/vue-course.git</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>远程库的操作的命令</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 列出当前的关联的远程库</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">远程库</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">l&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关联远程仓库</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">远程库</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除远程库</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">远程库</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">分支</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 向远程库推送代码，并和当前分支关联</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">远程</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">库&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">本地分</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">支&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">远程分</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">支&gt;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">l&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从远程库下载代码</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 如果本地的版本低于远程库，push默认是推不上去</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fetch</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t\t # 使用fetch拉取代码后，必须要手动对代码进行合并</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 从服务器上拉取代码并自动合并</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>注意：推送代码之前，一定要先从远程库中拉取最新的代码</p></blockquote><h1 id="_11-tag-标签" tabindex="-1"><a class="header-anchor" href="#_11-tag-标签"><span>11 tag 标签</span></a></h1><ul><li><p>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。</p></li><li><p>如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> switch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">分支</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">提交i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 提交id</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 远程仓库</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标签名</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 远程仓库</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tags</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标签名</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 删除标签</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 远程仓库</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --delete</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标签名</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 删除远程标签</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="_12-忽略文件-gitignore" tabindex="-1"><a class="header-anchor" href="#_12-忽略文件-gitignore"><span>12 忽略文件(gitignore)</span></a></h1><ul><li><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p></li><li><p>在主目录下建立&quot;.gitignore&quot;文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（<code>#</code>）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（<code>*</code>）代表任意多个字符，问号（<code>？</code>）代表一个字符，方括号（<code>[abc]</code>）代表可选字符范围，大括号（<code>{string1,string2,…}</code>）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（<code>!</code>），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（<code>/</code>），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（<code>/</code>），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#为注释</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*.txt       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lib.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #但lib.txt除外</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/temp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       #仅忽略项目根目录下的TODO文件,不包括其它目录</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tempbuild/</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #忽略build/目录下的所有文件</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doc/*.txt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   #会忽略doc/notes.txt \t但不包括 </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doc/server/arch.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="_13-github-的静态页面" tabindex="-1"><a class="header-anchor" href="#_13-github-的静态页面"><span>13 github 的静态页面</span></a></h1><ul><li>在 github 中，可以将自己的静态页面直接部署到 github 中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。</li><li>要求： <ul><li>静态页面的分支必须叫做：gh-pages</li><li>如果希望页面可以通过 xxx.github.io 访问，则需要将库的名字配置为 xxx.github.io</li></ul></li></ul><h1 id="_14-docusaurus" tabindex="-1"><a class="header-anchor" href="#_14-docusaurus"><span>14 docusaurus</span></a></h1><ul><li><p>facebook 推出的开源的静态的内容管理系统，通过它可以快速的部署一个静态网站</p></li><li><p>使用：</p><ul><li>网址： <ul><li>https://docusaurus.io/</li></ul></li><li>安装 <ul><li><code>npx create-docusaurus@latest my-website classic</code></li></ul></li><li>启动项目 <ul><li><code>npm start</code>或<code>yarn start</code></li></ul></li><li>构建项目 <ul><li><code>npm run build</code>或<code>yarn build</code></li></ul></li><li>配置项目： <ul><li><code>docusaurus</code>.<code>config</code>.<code>js</code> 项目的配置文件</li></ul></li><li>添加页面： <ul><li>在 <code>docusaurus</code> 框架中，页面分成三种：1.<code>page</code>，2.<code>blog</code>，3.<code>doc</code></li></ul></li><li>案例地址： <ul><li>https://github.com/lilichao/lilichao.github.io</li></ul></li></ul></li></ul>',50))])}],["__file","Git.html.vue"]]),h=JSON.parse('{"path":"/study/coding/git/Git.html","title":"《git的使用》","lang":"zh-CN","frontmatter":{"number headings":"auto, first-level 1, max 6, contents ^top, 1.1","title":"《git的使用》","category":["前端","git"],"tags":["git"],"data":"2024-07-14T05:57:00.000Z","article":false,"feed":false,"seo":false,"head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://situ-bei.github.io/keano/en/study/coding/git/Git.html"}]]},"headers":[{"level":1,"title":"1 常见的版本控制工具","slug":"_1-常见的版本控制工具","link":"#_1-常见的版本控制工具","children":[]},{"level":1,"title":"2 启动Git","slug":"_2-启动git","link":"#_2-启动git","children":[]},{"level":1,"title":"3 Git配置","slug":"_3-git配置","link":"#_3-git配置","children":[{"level":2,"title":"3.1 设置用户名与邮箱（用户标识，必要）","slug":"_3-1-设置用户名与邮箱-用户标识-必要","link":"#_3-1-设置用户名与邮箱-用户标识-必要","children":[]}]},{"level":1,"title":"4 Git基本理论（重要）","slug":"_4-git基本理论-重要","link":"#_4-git基本理论-重要","children":[{"level":2,"title":"4.1 工作流程","slug":"_4-1-工作流程","link":"#_4-1-工作流程","children":[]}]},{"level":1,"title":"5 Git项目搭建","slug":"_5-git项目搭建","link":"#_5-git项目搭建","children":[{"level":2,"title":"5.1 11.1、创建工作目录与常用指令","slug":"_5-1-11-1、创建工作目录与常用指令","link":"#_5-1-11-1、创建工作目录与常用指令","children":[{"level":3,"title":"5.1.1 本地仓库搭建","slug":"_5-1-1-本地仓库搭建","link":"#_5-1-1-本地仓库搭建","children":[]},{"level":3,"title":"5.1.2 克隆远程仓库","slug":"_5-1-2-克隆远程仓库","link":"#_5-1-2-克隆远程仓库","children":[]}]}]},{"level":1,"title":"6 Git文件操作","slug":"_6-git文件操作","link":"#_6-git文件操作","children":[{"level":2,"title":"6.1 文件的四种状态","slug":"_6-1-文件的四种状态","link":"#_6-1-文件的四种状态","children":[]},{"level":2,"title":"6.2 查看文件状态","slug":"_6-2-查看文件状态","link":"#_6-2-查看文件状态","children":[]}]},{"level":1,"title":"7 使用码云(Gitee)","slug":"_7-使用码云-gitee","link":"#_7-使用码云-gitee","children":[]},{"level":1,"title":"8 GIT分支","slug":"_8-git分支","link":"#_8-git分支","children":[]},{"level":1,"title":"9 变基（rebase）","slug":"_9-变基-rebase","link":"#_9-变基-rebase","children":[]},{"level":1,"title":"10 远程仓库（remote）","slug":"_10-远程仓库-remote","link":"#_10-远程仓库-remote","children":[]},{"level":1,"title":"11 tag 标签","slug":"_11-tag-标签","link":"#_11-tag-标签","children":[]},{"level":1,"title":"12 忽略文件(gitignore)","slug":"_12-忽略文件-gitignore","link":"#_12-忽略文件-gitignore","children":[]},{"level":1,"title":"13 github 的静态页面","slug":"_13-github-的静态页面","link":"#_13-github-的静态页面","children":[]},{"level":1,"title":"14 docusaurus","slug":"_14-docusaurus","link":"#_14-docusaurus","children":[]}],"git":{"createdTime":1728822746000,"updatedTime":1729572674000,"contributors":[{"name":"situ-bei","email":"2606405907@qq.com","commits":5}]},"readingTime":{"minutes":12.18,"words":3655},"filePathRelative":"study/coding/git/Git.md","localizedDate":"2024年10月13日"}');export{n as comp,h as data};
