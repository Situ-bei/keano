import{_ as s,c as i,a,o as n}from"./app-B6uUf-bH.js";const l=s({},[["render",function(s,l){return n(),i("div",null,l[0]||(l[0]=[a('<h1 id="_1-nodejs简介" tabindex="-1"><a class="header-anchor" href="#_1-nodejs简介"><span>1 NodeJS简介</span></a></h1><h2 id="_1-1-node-js" tabindex="-1"><a class="header-anchor" href="#_1-1-node-js"><span>1.1 Node.js</span></a></h2><ul><li>运行在服务器端的js</li><li>用来编写服务器</li><li>特点： <ul><li>单线程、异步、非阻塞</li><li>统一API</li></ul></li></ul><h2 id="_1-2-nvm-推荐" tabindex="-1"><a class="header-anchor" href="#_1-2-nvm-推荐"><span>1.2 nvm(推荐)</span></a></h2><ul><li>命令</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nvm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 显示已安装的node版本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nvm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 安装指定版本的node</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nvm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node_mirror</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://npmmirror.com/mirrors/node/</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 配置nvm的镜像服务器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nvm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 指定要使用的node版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-node-js和javascript有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-3-node-js和javascript有什么区别"><span>1.3 node.js和JavaScript有什么区别</span></a></h2><ul><li>ECMAScript（node有）</li><li>DOM（node没有）</li><li>BOM（node没有）</li></ul><h1 id="_2-异步编程" tabindex="-1"><a class="header-anchor" href="#_2-异步编程"><span>2 异步编程</span></a></h1><ol><li><p>进程和线程</p><ul><li>进程（厂房） <ul><li>程序的运行的环境</li></ul></li><li>线程（工人） <ul><li>线程是实际进行运算的东西</li></ul></li></ul></li><li><p>同步</p><ul><li>通常情况代码都是自上向下一行一行执行的</li><li>前边的代码不执行后边的代码也不会执行</li><li>同步的代码执行会出现阻塞的情况</li><li>一行代码执行慢会影响到整个程序的执行</li></ul></li><li><p>解决同步问题：</p><ul><li>java python <ul><li>通过多线程来解决</li></ul></li><li>node.js <ul><li>通过异步方式来解决</li></ul></li></ul></li><li><p>异步</p><ul><li>一段代码的执行不会影响到其他的程序</li><li>异步的问题： 异步的代码无法通过return来设置返回值</li><li>特点： 1.不会阻塞其他代码的执行 2.需要通过回调函数来返回结果</li><li>基于回调函数的异步带来的问题 <ol><li>代码的可读性差</li><li>可调试性差</li></ol></li><li>解决问题： <ul><li>需要一个东西，可以代替回调函数来给我们返回结果</li><li>Promise横空出世 <ul><li>Promise是一个可以用来存储数据的对象 Promise存储数据的方式比较特殊， 这种特殊方式使得Promise可以用来存储异步调用的数据</li></ul></li></ul></li></ul></li></ol><h2 id="_2-1-promise" tabindex="-1"><a class="header-anchor" href="#_2-1-promise"><span>2.1 Promise</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>异步调用必须要通过回调函数来返回数据，</span></span>\n<span class="line"><span>\t当我们进行一些复杂的调用的时，会出现“回调地狱”</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>问题：</span></span>\n<span class="line"><span>\t异步必须通过回调函数来返回结果，回调函数一多就很痛苦</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Promise</span></span>\n<span class="line"><span>\t- Promise可以帮助我们解决异步中的回调函数的问题</span></span>\n<span class="line"><span>\t- Promise就是一个用来存储数据的容器</span></span>\n<span class="line"><span>\t\t它拥有着一套特殊的存取数据的方式</span></span>\n<span class="line"><span>\t\t这个方式使得它里边可以存储异步调用的结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="js" data-title="js" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建Promise</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建Promise时，构造函数中需要一个函数作为参数</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Promise构造函数的回调函数，它会在创建Promise时调用，调用时会有两个参数传递进去</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> promise</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // resolve 和 reject 是两个函数，通过这两个函数可以向Promise中存储数据</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // resolve在执行正常时存储数据，reject在执行错误时存储数据</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;哈哈&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 通过函数来向Promise中添加数据，好处就是可以用来添加异步调用的数据</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;哈哈&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // throw new Error(&quot;哈哈，出错了&quot;)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;resolve返回的数据&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // reject(&quot;reject返回的数据&quot;)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">从</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">中读取数据</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 可以通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的实例方法</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">来读取</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">中存储的数据</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">需要两个回调函数作为参数，回调函数用来获取</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">中的数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储的数据，会调用第一个函数返回，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t可以在第一个函数中编写处理数据的代码</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储的数据或者出现异常时，会调用第二个函数返回</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t可以在第二个函数中编写处理异常的代码</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">reason</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-js line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="js" data-title="js" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">中维护了两个隐藏属性：</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\tPromiseResult</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 用来存储数据</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\tPromiseState</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 记录</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的状态（三种状态）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\tpending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   （进行中）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\tfulfilled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（完成） 通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储数据时</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\trejected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（拒绝，出错了） 出错了或通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储数据时</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">只能修改一次，修改以后永远不会在变</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t流程：</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t当</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">创建时，</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PromiseState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">初始值为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t当通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储数据时 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PromiseState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fulfilled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（完成）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\t\tPromiseResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">变为存储的数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t当通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储数据或出错时 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PromiseState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rejected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">（拒绝，出错了）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\t\tPromiseResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">变为存储的数据 或 异常对象</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t当我们通过</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">读取数据时，相当于为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">设置了回调函数，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t如果</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PromiseState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">变为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fulfilled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，则调用</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的第一个回调函数来返回数据</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t如果</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PromiseState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">变为</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rejected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，则调用</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的第二个回调函数来返回数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() 用法和</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">类似，但是只需要一个回调函数作为参数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tcatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()中的回调函数只会在</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">被拒绝时才调用</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tcatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() 相当于 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reason</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {})</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tcatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() 就是一个专门处理</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">异常的方法</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 无论是正常存储数据还是出现异常了，</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">总会执行</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 但是</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">的回调函数中不会接收到数据</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()通常用来编写一些无论成功与否都要执行代码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" data-title="" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Promise就是一个用来存储数据对象</span></span>\n<span class="line"><span>    但是由于Promise存取的方式的特殊，所以可以直接将异步调用的结果存储到Promise中</span></span>\n<span class="line"><span>对Promise进行链式调用时</span></span>\n<span class="line"><span>    后边的方法（then和catch）读取的上一步的执行结果</span></span>\n<span class="line"><span>     如果上一步的执行结果不是当前想要的结果，则跳过当前的方法</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>当Promise出现异常时，而整个调用链中没有出现catch，则异常会向外抛出</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>promise中的</span></span>\n<span class="line"><span>        then (return new Promise())</span></span>\n<span class="line"><span>        catch</span></span>\n<span class="line"><span>        - 这三个方法都会返回一个新的Promise,</span></span>\n<span class="line"><span>            Promise中会存储回调函数的返回值</span></span>\n<span class="line"><span>        finally</span></span>\n<span class="line"><span>            - finally的返回值，不会存储到新的Promise中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-2-promise的静态方法" tabindex="-1"><a class="header-anchor" href="#_2-2-promise的静态方法"><span>2.2 Promise的静态方法</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>静态方法</span></span>\n<span class="line"><span>\tPromise.resolve() 创建一个立即完成的Promise</span></span>\n<span class="line"><span>\tPromise.reject() 创建一个立即拒绝的Promise</span></span>\n<span class="line"><span>\tPromise.all([...]) 同时返回多个Promise的执行结果</span></span>\n<span class="line"><span>\t\t其中有一个报错，就返回错误</span></span>\n<span class="line"><span>\tPromise.allSettled([...]) 同时返回多个Promise的执行结果(无论成功或失败)</span></span>\n<span class="line"><span>\t   {status: &#39;fulfilled&#39;, value: 579}</span></span>\n<span class="line"><span>\t   {status: &#39;rejected&#39;, reason: &#39;哈哈&#39;}</span></span>\n<span class="line"><span>\tPromise.race([...]) 返回执行最快的Promise（不考虑对错）</span></span>\n<span class="line"><span>\tPromise.any([...]) 返回执行最快的完成的Promise</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-async和await" tabindex="-1"><a class="header-anchor" href="#_2-3-async和await"><span>2.3 async和await</span></a></h2><p>nodejs文档： https://nodejs.dev/en/ 通过async可以快速的创建异步函数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>通过async可以来创建一个异步函数</span></span>\n<span class="line"><span>\t异步函数的返回值会自动封装到一个Promise中返回</span></span>\n<span class="line"><span>在async声明的异步函数中可以使用await关键字来调用异步函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',21)]))}],["__file","Node.js.html.vue"]]),e=JSON.parse('{"path":"/study/coding/NodeJS/Node.js.html","title":"NodeJS 李李立超老师版本","lang":"zh-CN","frontmatter":{"number headings":"auto, first-level 1, max 6, contents ^top, 1.1","title":"NodeJS 李李立超老师版本","category":["前端","NodeJS"],"tag":["NodeJS","NodeJS 基础","李立超"],"date":"2024-06-29T00:00:00.000Z","article":false,"feed":false,"seo":false,"head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://situ-bei.github.io/keano/en/study/coding/NodeJS/Node.js.html"}]]},"headers":[{"level":1,"title":"1 NodeJS简介","slug":"_1-nodejs简介","link":"#_1-nodejs简介","children":[{"level":2,"title":"1.1 Node.js","slug":"_1-1-node-js","link":"#_1-1-node-js","children":[]},{"level":2,"title":"1.2 nvm(推荐)","slug":"_1-2-nvm-推荐","link":"#_1-2-nvm-推荐","children":[]},{"level":2,"title":"1.3 node.js和JavaScript有什么区别","slug":"_1-3-node-js和javascript有什么区别","link":"#_1-3-node-js和javascript有什么区别","children":[]}]},{"level":1,"title":"2 异步编程","slug":"_2-异步编程","link":"#_2-异步编程","children":[{"level":2,"title":"2.1 Promise","slug":"_2-1-promise","link":"#_2-1-promise","children":[]},{"level":2,"title":"2.2 Promise的静态方法","slug":"_2-2-promise的静态方法","link":"#_2-2-promise的静态方法","children":[]},{"level":2,"title":"2.3 async和await","slug":"_2-3-async和await","link":"#_2-3-async和await","children":[]}]}],"git":{"createdTime":1728822746000,"updatedTime":1729572674000,"contributors":[{"name":"situ-bei","email":"2606405907@qq.com","commits":4}]},"readingTime":{"minutes":5.46,"words":1638},"filePathRelative":"study/coding/NodeJS/Node.js.md","localizedDate":"2024年6月29日"}');export{l as comp,e as data};
