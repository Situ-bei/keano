import{_ as l,c as i,a as e,o as t}from"./app-BlOqLpTI.js";const a=l({},[["render",function(l,a){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="javascript思维导图" tabindex="-1"><a class="header-anchor" href="#javascript思维导图"><span>JavaScript思维导图</span></a></h1><h2 id="_2-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-基本语法"><span>2 基本语法</span></a></h2><ul><li><p>Hello World</p><ul><li><p>编写位置</p><ul><li><p>Script标签</p></li><li><p>外部Js文件</p><ul><li><code>&lt;script src=&quot;xxx.script&quot;&gt;&lt;/script&gt;</code></li></ul></li><li><p>标签的属性中</p><ul><li><code>- &lt;button onclick=&quot;js代码&quot;&gt;按钮&lt;/button&gt;</code><code> - &lt;a href=&quot;javascript:js代码;&quot;&gt;超链接&lt;/a&gt;</code></li></ul></li></ul></li><li><p>打印语句</p><ul><li><code>&lt;script&gt;</code><code> alert(...)</code><code>console.log(...)</code><code>document.write(...)</code><code>&lt;/script&gt;</code></li></ul></li></ul></li><li><p>基本语法</p><ul><li>单行注释    //</li><li>多行注释   /*   */</li><li>分号 <ul><li>JS中每一条语句都应该以;结尾，但是JS解释器中有自动添加分号的机制，所以即使不加括号JS解释器会自动根据代码的上下文添加分号，虽然在极少数的情况下会加错，但不写分号依然是偷懒的不错选择，所以加不加;完全看你自己的心情。</li></ul></li><li>大小写 <ul><li>JS会严格区分字母的大小写，A和a是两个东西，所以注意区分。</li></ul></li><li>忽略空格 <ul><li>和HTML相同，JS中的多个空格和换行会被忽略，所以可以借助空格或换行来对代码进行格式化，不会影响代码的运行逻辑。</li></ul></li></ul></li></ul><h2 id="_3-字面量和变量" tabindex="-1"><a class="header-anchor" href="#_3-字面量和变量"><span>3 字面量和变量</span></a></h2><ul><li>字面量 <ul><li><ul><li>字面量其实就是一个值,它所代表的含义就是它字面的意思</li></ul></li><li>比如:1 2 3 4 100 &quot;hello&quot; true null ....</li></ul></li><li>变量 <ul><li><ul><li>变量可以用“存储”字面量</li></ul></li><li>并且变量中存储的字面量可以随意的修改</li><li>通过变量可以对字面量描述，变量比较方便修改</li><li>变量的使用 <ul><li><ul><li>--&gt;  let 变量名</li></ul></li><li>--&gt;  var 变量名</li></ul></li><li>变量赋值 <ul><li><ul><li>--&gt;  a =xx</li></ul></li></ul></li></ul></li><li>变量的内存 <ul><li>变量中并不存储任何值,而是存储值的内存地址!</li></ul></li><li>常量 <ul><li><ul><li>在js中使用const声明常量在JS中,常量只能赋值一次,重复赋值会报错</li></ul></li><li>在JS中除了常规的常量外,有一些对象类型的数据我们也会声明为常量</li></ul></li><li>标识符 <ul><li>在JS中,所有可以由我们自主命名的内容,都可以认为是一个标识符</li><li>使用标识符需要遵循如下的命名规范: <ul><li><ol><li>标识符只能含有字母、数字、下划线、$,且不能以数字开头</li></ol></li><li><ol start="2"><li>标识符不能是JS中的关键字和保留字,也不建议使用内置的函数或类名作为变量名</li></ol><ul><li>通常会使用驼峰命名法</li><li><ul><li>首字母小写,每个单词开头大写</li></ul></li><li>maxlength -- &gt; maxLength</li><li><ul><li>类名会使用大驼峰命名法</li></ul></li><li>首字母大写,每个单词开头大写</li><li>maxlength -- &gt; MaxLength</li><li><ul><li>常量的字母会全部大写</li></ul></li><li>MAX LENGTH</li></ul></li></ul></li></ul></li></ul><h2 id="_4-数据类型" tabindex="-1"><a class="header-anchor" href="#_4-数据类型"><span>4 数据类型</span></a></h2><h2 id="_5-流程控制语句" tabindex="-1"><a class="header-anchor" href="#_5-流程控制语句"><span>5 流程控制语句</span></a></h2><h2 id="_6-循环语句" tabindex="-1"><a class="header-anchor" href="#_6-循环语句"><span>6 循环语句</span></a></h2>',8)]))}],["__file","JavaScript思维导图.html.vue"]]),u=JSON.parse('{"path":"/study/coding/JS/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html","title":"JavaScript思维导图","lang":"zh-CN","frontmatter":{"mindmap-plugin":"basic","title":"JavaScript思维导图","category":["前端","JS"],"tag":["JS","JS基础"],"date":"2024-06-29T22:48:00.000Z","article":false,"feed":false,"seo":false,"head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://situ-bei.github.io/keano/en/study/coding/JS/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html"}]]},"headers":[{"level":1,"title":"JavaScript思维导图","slug":"javascript思维导图","link":"#javascript思维导图","children":[{"level":2,"title":"2 基本语法","slug":"_2-基本语法","link":"#_2-基本语法","children":[]},{"level":2,"title":"3 字面量和变量","slug":"_3-字面量和变量","link":"#_3-字面量和变量","children":[]},{"level":2,"title":"4 数据类型","slug":"_4-数据类型","link":"#_4-数据类型","children":[]},{"level":2,"title":"5 流程控制语句","slug":"_5-流程控制语句","link":"#_5-流程控制语句","children":[]},{"level":2,"title":"6 循环语句","slug":"_6-循环语句","link":"#_6-循环语句","children":[]}]}],"git":{"createdTime":1728822746000,"updatedTime":1729572674000,"contributors":[{"name":"situ-bei","email":"2606405907@qq.com","commits":4}]},"readingTime":{"minutes":2.25,"words":674},"filePathRelative":"study/coding/JS/JavaScript思维导图.md","localizedDate":"2024年6月29日"}');export{a as comp,u as data};
