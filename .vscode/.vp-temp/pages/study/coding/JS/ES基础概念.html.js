import comp from "F:/桌面/【Vue】/Blog/keano/.vscode/.vp-temp/pages/study/coding/JS/ES基础概念.html.vue"
const data = JSON.parse("{\"path\":\"/study/coding/JS/ES%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html\",\"title\":\"《ES 基础概念》\",\"lang\":\"zh-CN\",\"frontmatter\":{\"number headings\":\"auto, first-level 1, max 6, contents ^top, 1.1\",\"title\":\"《ES 基础概念》\",\"category\":[\"前端\",\"JS\"],\"tags\":[\"JS\",\"JS基础\"],\"date\":\"2024-06-29T22:48:00.000Z\",\"article\":false,\"description\":\"1 JS的简介 1.1 JS的概念 JS是一门运行在游览器中的轻量型，解释性语言。 它具有一下特点： 解释性 它不需要我们进行手动编译，直接通过编译器（也就是游览器或JS引擎）进行编译，边写边编译。 单线程 JS是一门单线程语言，也就是它是一行一行去执行代码的，提高了编译效率，但在一些应用场景也变得羸弱，所以又提出了异步编程的方式，提高代码运行的效率。...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://situ-bei.github.io/keano/keano/study/coding/JS/ES%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"KEANO\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"《ES 基础概念》\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1 JS的简介 1.1 JS的概念 JS是一门运行在游览器中的轻量型，解释性语言。 它具有一下特点： 解释性 它不需要我们进行手动编译，直接通过编译器（也就是游览器或JS引擎）进行编译，边写边编译。 单线程 JS是一门单线程语言，也就是它是一行一行去执行代码的，提高了编译效率，但在一些应用场景也变得羸弱，所以又提出了异步编程的方式，提高代码运行的效率。...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"website\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2024-10-19T20:06:47.000Z\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JS\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JS基础\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-06-29T22:48:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2024-10-19T20:06:47.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"WebPage\\\",\\\"name\\\":\\\"《ES 基础概念》\\\",\\\"description\\\":\\\"1 JS的简介 1.1 JS的概念 JS是一门运行在游览器中的轻量型，解释性语言。 它具有一下特点： 解释性 它不需要我们进行手动编译，直接通过编译器（也就是游览器或JS引擎）进行编译，边写边编译。 单线程 JS是一门单线程语言，也就是它是一行一行去执行代码的，提高了编译效率，但在一些应用场景也变得羸弱，所以又提出了异步编程的方式，提高代码运行的效率。...\\\"}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.1 JS的概念\",\"slug\":\"_1-1-js的概念\",\"link\":\"#_1-1-js的概念\",\"children\":[]},{\"level\":2,\"title\":\"2.1 2.1引入方式\",\"slug\":\"_2-1-2-1引入方式\",\"link\":\"#_2-1-2-1引入方式\",\"children\":[{\"level\":3,\"title\":\"2.1.1 行内\",\"slug\":\"_2-1-1-行内\",\"link\":\"#_2-1-1-行内\",\"children\":[]},{\"level\":3,\"title\":\"2.1.2 内部\",\"slug\":\"_2-1-2-内部\",\"link\":\"#_2-1-2-内部\",\"children\":[]},{\"level\":3,\"title\":\"2.1.3 外部\",\"slug\":\"_2-1-3-外部\",\"link\":\"#_2-1-3-外部\",\"children\":[]}]},{\"level\":2,\"title\":\"2.2 注释和结束符\",\"slug\":\"_2-2-注释和结束符\",\"link\":\"#_2-2-注释和结束符\",\"children\":[{\"level\":3,\"title\":\"2.2.1 单行注释\",\"slug\":\"_2-2-1-单行注释\",\"link\":\"#_2-2-1-单行注释\",\"children\":[]},{\"level\":3,\"title\":\"2.2.2 多行注释\",\"slug\":\"_2-2-2-多行注释\",\"link\":\"#_2-2-2-多行注释\",\"children\":[]}]},{\"level\":2,\"title\":\"2.3 结束符\",\"slug\":\"_2-3-结束符\",\"link\":\"#_2-3-结束符\",\"children\":[]},{\"level\":2,\"title\":\"2.4 大小写\",\"slug\":\"_2-4-大小写\",\"link\":\"#_2-4-大小写\",\"children\":[]},{\"level\":2,\"title\":\"2.5 忽略空格\",\"slug\":\"_2-5-忽略空格\",\"link\":\"#_2-5-忽略空格\",\"children\":[]},{\"level\":2,\"title\":\"2.6 输入和输出\",\"slug\":\"_2-6-输入和输出\",\"link\":\"#_2-6-输入和输出\",\"children\":[{\"level\":3,\"title\":\"2.6.1 输出\",\"slug\":\"_2-6-1-输出\",\"link\":\"#_2-6-1-输出\",\"children\":[]},{\"level\":3,\"title\":\"2.6.2 输入\",\"slug\":\"_2-6-2-输入\",\"link\":\"#_2-6-2-输入\",\"children\":[]}]},{\"level\":2,\"title\":\"2.7 字面量\",\"slug\":\"_2-7-字面量\",\"link\":\"#_2-7-字面量\",\"children\":[]},{\"level\":2,\"title\":\"3.1 变量\",\"slug\":\"_3-1-变量\",\"link\":\"#_3-1-变量\",\"children\":[{\"level\":3,\"title\":\"3.1.1 声明变量\",\"slug\":\"_3-1-1-声明变量\",\"link\":\"#_3-1-1-声明变量\",\"children\":[]},{\"level\":3,\"title\":\"3.1.2 变量赋值\",\"slug\":\"_3-1-2-变量赋值\",\"link\":\"#_3-1-2-变量赋值\",\"children\":[]},{\"level\":3,\"title\":\"3.1.3 变量名命名规则\",\"slug\":\"_3-1-3-变量名命名规则\",\"link\":\"#_3-1-3-变量名命名规则\",\"children\":[]}]},{\"level\":2,\"title\":\"3.2 常量\",\"slug\":\"_3-2-常量\",\"link\":\"#_3-2-常量\",\"children\":[]},{\"level\":2,\"title\":\"3.3 数据类型\",\"slug\":\"_3-3-数据类型\",\"link\":\"#_3-3-数据类型\",\"children\":[{\"level\":3,\"title\":\"3.3.1 基本数据类型\",\"slug\":\"_3-3-1-基本数据类型\",\"link\":\"#_3-3-1-基本数据类型\",\"children\":[]}]},{\"level\":2,\"title\":\"3.4 类型转换\",\"slug\":\"_3-4-类型转换\",\"link\":\"#_3-4-类型转换\",\"children\":[{\"level\":3,\"title\":\"3.4.1 显式转换\",\"slug\":\"_3-4-1-显式转换\",\"link\":\"#_3-4-1-显式转换\",\"children\":[]}]},{\"level\":2,\"title\":\"3.5 运算符\",\"slug\":\"_3-5-运算符\",\"link\":\"#_3-5-运算符\",\"children\":[{\"level\":3,\"title\":\"3.5.1 算术运算符\",\"slug\":\"_3-5-1-算术运算符\",\"link\":\"#_3-5-1-算术运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.5.2 赋值运算符\",\"slug\":\"_3-5-2-赋值运算符\",\"link\":\"#_3-5-2-赋值运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.5.3 一元的±\",\"slug\":\"_3-5-3-一元的±\",\"link\":\"#_3-5-3-一元的±\",\"children\":[]},{\"level\":3,\"title\":\"3.5.4 自增自减运算符  ++  --\",\"slug\":\"_3-5-4-自增自减运算符\",\"link\":\"#_3-5-4-自增自减运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.5.5 逻辑运算符\",\"slug\":\"_3-5-5-逻辑运算符\",\"link\":\"#_3-5-5-逻辑运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.5.6 比较运算符\",\"slug\":\"_3-5-6-比较运算符\",\"link\":\"#_3-5-6-比较运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.5.7 运算符优先级\",\"slug\":\"_3-5-7-运算符优先级\",\"link\":\"#_3-5-7-运算符优先级\",\"children\":[]}]},{\"level\":2,\"title\":\"3.6 语句\",\"slug\":\"_3-6-语句\",\"link\":\"#_3-6-语句\",\"children\":[{\"level\":3,\"title\":\"3.6.1 表达式和语句\",\"slug\":\"_3-6-1-表达式和语句\",\"link\":\"#_3-6-1-表达式和语句\",\"children\":[]},{\"level\":3,\"title\":\"3.6.2 分支语句\",\"slug\":\"_3-6-2-分支语句\",\"link\":\"#_3-6-2-分支语句\",\"children\":[]},{\"level\":3,\"title\":\"3.6.3 循环语句\",\"slug\":\"_3-6-3-循环语句\",\"link\":\"#_3-6-3-循环语句\",\"children\":[]}]},{\"level\":2,\"title\":\"3.7 对象\",\"slug\":\"_3-7-对象\",\"link\":\"#_3-7-对象\",\"children\":[{\"level\":3,\"title\":\"3.7.1 对象的创建，添加，读取\",\"slug\":\"_3-7-1-对象的创建-添加-读取\",\"link\":\"#_3-7-1-对象的创建-添加-读取\",\"children\":[]},{\"level\":3,\"title\":\"3.7.2 属性名字和属性值\",\"slug\":\"_3-7-2-属性名字和属性值\",\"link\":\"#_3-7-2-属性名字和属性值\",\"children\":[]},{\"level\":3,\"title\":\"3.7.3 typeof  和 in 运算符\",\"slug\":\"_3-7-3-typeof-和-in-运算符\",\"link\":\"#_3-7-3-typeof-和-in-运算符\",\"children\":[]},{\"level\":3,\"title\":\"3.7.4 枚举对象的属性\",\"slug\":\"_3-7-4-枚举对象的属性\",\"link\":\"#_3-7-4-枚举对象的属性\",\"children\":[]},{\"level\":3,\"title\":\"3.7.5 可变类型\",\"slug\":\"_3-7-5-可变类型\",\"link\":\"#_3-7-5-可变类型\",\"children\":[]},{\"level\":3,\"title\":\"3.7.6 变量和对象\",\"slug\":\"_3-7-6-变量和对象\",\"link\":\"#_3-7-6-变量和对象\",\"children\":[]}]},{\"level\":2,\"title\":\"3.8 面相对象编程（OOP）\",\"slug\":\"_3-8-面相对象编程-oop\",\"link\":\"#_3-8-面相对象编程-oop\",\"children\":[{\"level\":3,\"title\":\"3.8.1 类（class）\",\"slug\":\"_3-8-1-类-class\",\"link\":\"#_3-8-1-类-class\",\"children\":[]},{\"level\":3,\"title\":\"3.8.2 封装、继承和多态\",\"slug\":\"_3-8-2-封装、继承和多态\",\"link\":\"#_3-8-2-封装、继承和多态\",\"children\":[]},{\"level\":3,\"title\":\"3.8.3 对象的结构\",\"slug\":\"_3-8-3-对象的结构\",\"link\":\"#_3-8-3-对象的结构\",\"children\":[]}]},{\"level\":2,\"title\":\"3.9 函数（Function）\",\"slug\":\"_3-9-函数-function\",\"link\":\"#_3-9-函数-function\",\"children\":[{\"level\":3,\"title\":\"3.9.1 函数的基本概况\",\"slug\":\"_3-9-1-函数的基本概况\",\"link\":\"#_3-9-1-函数的基本概况\",\"children\":[]},{\"level\":3,\"title\":\"3.9.2 函数定义的方式\",\"slug\":\"_3-9-2-函数定义的方式\",\"link\":\"#_3-9-2-函数定义的方式\",\"children\":[]},{\"level\":3,\"title\":\"3.9.3 函数的参数\",\"slug\":\"_3-9-3-函数的参数\",\"link\":\"#_3-9-3-函数的参数\",\"children\":[]},{\"level\":3,\"title\":\"3.9.4 函数的返回值\",\"slug\":\"_3-9-4-函数的返回值\",\"link\":\"#_3-9-4-函数的返回值\",\"children\":[]},{\"level\":3,\"title\":\"3.9.5 windows 对象\",\"slug\":\"_3-9-5-windows-对象\",\"link\":\"#_3-9-5-windows-对象\",\"children\":[]},{\"level\":3,\"title\":\"3.9.6 变量和函数的提升\",\"slug\":\"_3-9-6-变量和函数的提升\",\"link\":\"#_3-9-6-变量和函数的提升\",\"children\":[]},{\"level\":3,\"title\":\"3.9.7 作用域（scope）\",\"slug\":\"_3-9-7-作用域-scope\",\"link\":\"#_3-9-7-作用域-scope\",\"children\":[]},{\"level\":3,\"title\":\"3.9.8 this 隐含参数\",\"slug\":\"_3-9-8-this-隐含参数\",\"link\":\"#_3-9-8-this-隐含参数\",\"children\":[]},{\"level\":3,\"title\":\"3.9.9 严格模式\",\"slug\":\"_3-9-9-严格模式\",\"link\":\"#_3-9-9-严格模式\",\"children\":[]}]},{\"level\":2,\"title\":\"3.10 数组（Array）\",\"slug\":\"_3-10-数组-array\",\"link\":\"#_3-10-数组-array\",\"children\":[{\"level\":3,\"title\":\"3.10.1 数组的概况\",\"slug\":\"_3-10-1-数组的概况\",\"link\":\"#_3-10-1-数组的概况\",\"children\":[]},{\"level\":3,\"title\":\"3.10.2 遍历数组\",\"slug\":\"_3-10-2-遍历数组\",\"link\":\"#_3-10-2-遍历数组\",\"children\":[]},{\"level\":3,\"title\":\"3.10.3 数组的方法\",\"slug\":\"_3-10-3-数组的方法\",\"link\":\"#_3-10-3-数组的方法\",\"children\":[]},{\"level\":3,\"title\":\"3.10.4 数组的拷贝\",\"slug\":\"_3-10-4-数组的拷贝\",\"link\":\"#_3-10-4-数组的拷贝\",\"children\":[]},{\"level\":3,\"title\":\"3.10.5 数组去重，排序\",\"slug\":\"_3-10-5-数组去重-排序\",\"link\":\"#_3-10-5-数组去重-排序\",\"children\":[]},{\"level\":3,\"title\":\"3.10.6 封装函数\",\"slug\":\"_3-10-6-封装函数\",\"link\":\"#_3-10-6-封装函数\",\"children\":[]},{\"level\":3,\"title\":\"3.10.7 高阶函数\",\"slug\":\"_3-10-7-高阶函数\",\"link\":\"#_3-10-7-高阶函数\",\"children\":[]},{\"level\":3,\"title\":\"3.10.8 闭包\",\"slug\":\"_3-10-8-闭包\",\"link\":\"#_3-10-8-闭包\",\"children\":[]},{\"level\":3,\"title\":\"3.10.9 递归\",\"slug\":\"_3-10-9-递归\",\"link\":\"#_3-10-9-递归\",\"children\":[]},{\"level\":3,\"title\":\"3.10.10 可变参数/剩余参数\",\"slug\":\"_3-10-10-可变参数-剩余参数\",\"link\":\"#_3-10-10-可变参数-剩余参数\",\"children\":[]},{\"level\":3,\"title\":\"3.10.11 .call()  .apply()   .bind()\",\"slug\":\"_3-10-11-call-apply-bind\",\"link\":\"#_3-10-11-call-apply-bind\",\"children\":[]}]},{\"level\":2,\"title\":\"3.11 内建对象\",\"slug\":\"_3-11-内建对象\",\"link\":\"#_3-11-内建对象\",\"children\":[{\"level\":3,\"title\":\"3.11.1 解构赋值\",\"slug\":\"_3-11-1-解构赋值\",\"link\":\"#_3-11-1-解构赋值\",\"children\":[]},{\"level\":3,\"title\":\"3.11.2 对象的序列化（JSON）\",\"slug\":\"_3-11-2-对象的序列化-json\",\"link\":\"#_3-11-2-对象的序列化-json\",\"children\":[]},{\"level\":3,\"title\":\"3.11.3 Map\",\"slug\":\"_3-11-3-map\",\"link\":\"#_3-11-3-map\",\"children\":[]},{\"level\":3,\"title\":\"3.11.4 Set\",\"slug\":\"_3-11-4-set\",\"link\":\"#_3-11-4-set\",\"children\":[]},{\"level\":3,\"title\":\"3.11.5 Math\",\"slug\":\"_3-11-5-math\",\"link\":\"#_3-11-5-math\",\"children\":[]},{\"level\":3,\"title\":\"3.11.6 Date\",\"slug\":\"_3-11-6-date\",\"link\":\"#_3-11-6-date\",\"children\":[]},{\"level\":3,\"title\":\"3.11.7 包装类\",\"slug\":\"_3-11-7-包装类\",\"link\":\"#_3-11-7-包装类\",\"children\":[]},{\"level\":3,\"title\":\"3.11.8 字符串的方法\",\"slug\":\"_3-11-8-字符串的方法\",\"link\":\"#_3-11-8-字符串的方法\",\"children\":[]},{\"level\":3,\"title\":\"3.11.9 正则表达式\",\"slug\":\"_3-11-9-正则表达式\",\"link\":\"#_3-11-9-正则表达式\",\"children\":[]},{\"level\":3,\"title\":\"3.11.10 正则表达式的语法\",\"slug\":\"_3-11-10-正则表达式的语法\",\"link\":\"#_3-11-10-正则表达式的语法\",\"children\":[]},{\"level\":3,\"title\":\"3.11.11 垃圾回收（Garbage collection）\",\"slug\":\"_3-11-11-垃圾回收-garbage-collection\",\"link\":\"#_3-11-11-垃圾回收-garbage-collection\",\"children\":[]}]}],\"git\":{\"createdTime\":1728822746000,\"updatedTime\":1729368407000,\"contributors\":[{\"name\":\"situ-bei\",\"email\":\"2606405907@qq.com\",\"commits\":3}]},\"readingTime\":{\"minutes\":64.6,\"words\":19380},\"filePathRelative\":\"study/coding/JS/ES基础概念.md\",\"localizedDate\":\"2024年6月30日\",\"excerpt\":\"\\n<h2>1.1 JS的概念</h2>\\n<ul>\\n<li>JS是一门运行在游览器中的轻量型，解释性语言。</li>\\n<li>它具有一下特点：\\n<ul>\\n<li>解释性\\n<ul>\\n<li>它不需要我们进行手动编译，直接通过编译器（也就是游览器或JS引擎）进行编译，边写边编译。</li>\\n</ul>\\n</li>\\n<li>单线程\\n<ul>\\n<li>JS是一门单线程语言，也就是它是一行一行去执行代码的，提高了编译效率，但在一些应用场景也变得羸弱，所以又提出了异步编程的方式，提高代码运行的效率。</li>\\n</ul>\\n</li>\\n<li>面向对象\\n<ul>\\n<li>几乎所有的现代的编程语言都是面向对象的编程语言，JS 也不例外。所谓的面向对象，指将一组相关的功能（数据）统一封装到一个对象中，使用功能时无需考虑其实现的细节，直接找到对应的对象即可完成功能的调用。</li>\\n</ul>\\n</li>\\n<li>扩展ES\\n<ul>\\n<li>ECMAScript 只是为我们定义最基本的语法，像是数据类型（原始值、对象）、运算符、流程控制语句等内容。为了使 JS 可以适用于不同的场景，在不同的 JS 解释器中还为我们提供了不同的扩展以增强其功能。像是浏览器中的 DOM、BOM 使得我们可以通过 JS 操作网页和浏览器。NodeJS 中的 fs 模块可以使我们直接操作计算机系统中的各种文件。所以我们学习 JS 时，除了要学习 ES 标准以外，还要学习它的各种扩展，才能在不同的环境中发挥出 JS 的最大威力。</li>\\n</ul>\\n</li>\\n<li>函数式编程\\n<ul>\\n<li>在 JavaScript 中函数是一等公民，它可以像其他类型的值一样赋值给任意变量，也可以作为参数传递给其他函数。所以在 JS 中函数是非常非常重要，通过函数式编程可以编写出功能强大又灵活的代码。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
