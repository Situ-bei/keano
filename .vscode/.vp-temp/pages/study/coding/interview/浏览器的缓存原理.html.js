import comp from "F:/桌面/【Vue】/Blog/keano/.vscode/.vp-temp/pages/study/coding/interview/浏览器的缓存原理.html.vue"
const data = JSON.parse("{\"path\":\"/study/coding/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.html\",\"title\":\"浏览器的缓存机制和原理\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2024-10-19T00:00:00.000Z\",\"title\":\"浏览器的缓存机制和原理\",\"category\":[\"前端\",\"浏览器原理\"],\"tag\":[\"浏览器原理\",\"游览器缓存\",\"面试\"],\"description\":\"浏览器的缓存机制和原理 浏览器的缓存机制也就是我们说的 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的。 在前端开发中，我们追求性能和用户体验。对于一个网站，查看性能最简单的方式就是打开网站的速度。 而一个好的缓存策略可以大大提升网站的性能，使得已经下载后的资源被重复利用，减少客户端和服务器之间的请求次数，减少带宽，减少网络负荷。缓存...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://situ-bei.github.io/keano/keano/study/coding/interview/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"KEANO\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"浏览器的缓存机制和原理\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"浏览器的缓存机制和原理 浏览器的缓存机制也就是我们说的 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的。 在前端开发中，我们追求性能和用户体验。对于一个网站，查看性能最简单的方式就是打开网站的速度。 而一个好的缓存策略可以大大提升网站的性能，使得已经下载后的资源被重复利用，减少客户端和服务器之间的请求次数，减少带宽，减少网络负荷。缓存...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"浏览器原理\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"游览器缓存\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"面试\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-10-19T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"浏览器的缓存机制和原理\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2024-10-19T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Keano\\\",\\\"url\\\":\\\"https://mister-hope.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"缓存过程分析\",\"slug\":\"缓存过程分析\",\"link\":\"#缓存过程分析\",\"children\":[]},{\"level\":2,\"title\":\"强缓存\",\"slug\":\"强缓存\",\"link\":\"#强缓存\",\"children\":[{\"level\":3,\"title\":\"1. Expires\",\"slug\":\"_1-expires\",\"link\":\"#_1-expires\",\"children\":[]},{\"level\":3,\"title\":\"2.Cache-Control\",\"slug\":\"_2-cache-control\",\"link\":\"#_2-cache-control\",\"children\":[]}]},{\"level\":2,\"title\":\"协商缓存\",\"slug\":\"协商缓存\",\"link\":\"#协商缓存\",\"children\":[{\"level\":3,\"title\":\"1. Last-Modified 和 If-Modified-Since\",\"slug\":\"_1-last-modified-和-if-modified-since\",\"link\":\"#_1-last-modified-和-if-modified-since\",\"children\":[]},{\"level\":3,\"title\":\"2. ETag和If-None-Match\",\"slug\":\"_2-etag和if-none-match\",\"link\":\"#_2-etag和if-none-match\",\"children\":[]},{\"level\":3,\"title\":\"3. 比较\",\"slug\":\"_3-比较\",\"link\":\"#_3-比较\",\"children\":[]}]},{\"level\":2,\"title\":\"两种缓存策略的执行机制\",\"slug\":\"两种缓存策略的执行机制\",\"link\":\"#两种缓存策略的执行机制\",\"children\":[]},{\"level\":2,\"title\":\"缓存位置\",\"slug\":\"缓存位置\",\"link\":\"#缓存位置\",\"children\":[{\"level\":3,\"title\":\"1. Service Worker\",\"slug\":\"_1-service-worker\",\"link\":\"#_1-service-worker\",\"children\":[]},{\"level\":3,\"title\":\"2. Memory Cache\",\"slug\":\"_2-memory-cache\",\"link\":\"#_2-memory-cache\",\"children\":[]},{\"level\":3,\"title\":\"3. Disk Cache\",\"slug\":\"_3-disk-cache\",\"link\":\"#_3-disk-cache\",\"children\":[]},{\"level\":3,\"title\":\"4. Push Cache\",\"slug\":\"_4-push-cache\",\"link\":\"#_4-push-cache\",\"children\":[]}]},{\"level\":2,\"title\":\"用户行为对浏览器缓存的影响\",\"slug\":\"用户行为对浏览器缓存的影响\",\"link\":\"#用户行为对浏览器缓存的影响\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":15.43,\"words\":4630},\"filePathRelative\":\"study/coding/interview/浏览器的缓存原理.md\",\"localizedDate\":\"2024年10月19日\",\"excerpt\":\"\\n<h1>浏览器的缓存机制和原理</h1>\\n<p>浏览器的缓存机制也就是我们说的 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的。</p>\\n<p>在前端开发中，我们追求性能和用户体验。对于一个网站，查看性能最简单的方式就是打开网站的速度。</p>\\n<p>而一个好的缓存策略可以大大提升网站的性能，使得已经下载后的资源被重复利用，减少客户端和服务器之间的请求次数，减少带宽，减少网络负荷。缓存可以说是性能优化中简单高效的一种优化方式了。</p>\\n<p>对于一个数据请求来说，可以分为发起<strong>网络请求</strong>、<strong>后端处理</strong>、<strong>浏览器响应</strong>三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p>\\n\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
